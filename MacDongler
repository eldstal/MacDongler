#!/usr/bin/env python3

import argparse
import sys
import traceback

import json5

from sanity import passes_sanity_checks
from autodetect import detect_settings
from devicespec import load_devices, expand_device_list
import status
import resume
import configfs


def operation_list_devices(conf, devices):
  if len(conf.devices) == 0:
    types = set()
    print("Device names:")
    for name,obj in devices.items():
      print(f"   {name}")
      types.add(obj['type'])

    print("Device types:")
    for t in types:
      print(f"   {t}")

  elif len(conf.devices) == 1:
    dev = devices[conf.devices[0]]
    print(json5.dumps(dev, indent=4))

  else:
    for name in conf.devices:
      print(name)
  return 0


def operation_create_device(conf, devices):
  for name in conf.devices:
    if name not in devices: continue
    dev = devices[name]

    path,msg = configfs.create_gadget(conf, dev)
    if path is None:
      status.error(f"Creating device {name}: " + msg)
    else:
      status.info(f"Created device {name} as gadget {path}")


def operation_delete_device(conf):
  for path in configfs.list_gadgets(conf):
    try:
      ok,msg = configfs.delete_gadget(conf, path)
      if ok:
        status.info(f"Deleted gadget {path}")
      else:
        status.error(f"Failed to delete gadget {path}: " + msg)
    except Exception as e:
      status.error(f"Failed to delete gadget {path}: " + str(e))
      print(traceback.format_exc())

def main():
  parser = argparse.ArgumentParser()

  # Operating modes
  parser.add_argument("--scan-devices", "-s", action="store_true", default=False,
                      help="Test the named device(s) one by one.")

  parser.add_argument("--create-device", "-c", action="store_true", default=False,
                      help="Emulate the named device(s), and do nothing else.")

  parser.add_argument("--delete-device", "-d", action="store_true", default=False,
                      help="Delete emulated device(s), and do nothing else.")

  parser.add_argument("--list-devices", "-l", action="store_true", default=False,
                      help="List device info. If only one device is specified, shows all its properties")

  parser.add_argument("--sanity", "-S", action="store_true", default=False,
                      help="Run sanity checks and then exit")

  parser.add_argument("--one-step", "-1", action="store_true", default=False,
                      help="Test one device, save state for --resume and then exit. Return code will be 0 if all jobs are complete, 10 if there are devices left to test.")

  parser.add_argument("--debug", "-g", action="store_true", default=False,
                      help="Run slower, pause between steps, log more verbosely")

  parser.add_argument("devices", nargs="*", type=str,
                      help="Devices to test. Matches device names or device types. Glob rules such as * and ? apply to names. See --list-devices for known values. Example: 'ecm.*' net")


  # Configuration of paths, etc

  parser.add_argument("--resume-file", "-R", type=str, default="./.macdongler.resume",
                      help="File to save state in, in case operation is interrupted.")

  parser.add_argument("--resume", "-r", action="store_true", default=False,
                      help="Load state from the --resume-file and start from the next untested device.")

  parser.add_argument("--resume-from", "-n", type=int, default=0,
                      help="Start from the Nth device in the list of devices to test")

  parser.add_argument("--udc-controller", "-u", type=str, default=None,
                      help="UDC controller to attach devices to, one of the names available under /sys/class/udc/. Default: autoselect")

  parser.add_argument("--device-db", "-D", type=str, default=None,
                      help="Path to device database directory. Default: automatic")

  parser.add_argument("--language-code", "-L", type=str, default="0x409",
                      help="Numeric language code for strings. Default: 0x409 (en_US)")

  #parser.add_argument("--gadgetfs", "-G", type=str, default=None,
  #                    help="Path to mounted gadgetfs. Default: autodetect")

  parser.add_argument("--configfs", "-C", type=str, default=None,
                      help="Path to mounted configfs. Default: autodetect")

  parser.add_argument("--transmit-pcap", "-t", type=str, default=None,
                      help="PCAP file of network packets to send when emulating USB Ethernet adapters. Requires tcpreplay.")

  parser.add_argument("--status-file", "-f", type=str, default=None,
                      help="Path to structured log file where status updates are written")

  parser.add_argument("--no-color", "-P", action="store_true", default=False,
                      help="Suppress color in terminal output")


  conf = parser.parse_args()
  if conf.resume:
    resume.load(conf)
    conf.resume = True    # Don't accidentally turn that setting off, damnit!

  # Set up the logger
  status.setup(conf)

  # Handle any settings that are set to auto-detect
  detect_settings(conf)

  ok, msg = passes_sanity_checks(conf)
  if (not ok):
    status.error("Sanity check failed: " + msg)
    return 1

  # Load our device database from disk
  devices,msg = load_devices(conf)
  if devices is None:
    status.error("Failed to load device specs: " + msg)
    return 1

  if conf.sanity:
    # Just run the sanity checks, do nothing else
    return 0

  # Handle globs, etc,
  # After this, the list of globs will be a list of device names matching the patterns.
  conf.devices = expand_device_list(conf, conf.devices)

  if conf.list_devices:
    return operation_list_devices(conf, devices)

  elif conf.create_device:
    return operation_create_device(conf, devices)

  elif conf.delete_device:
    return operation_delete_device(conf)

  if conf.resume_file and not conf.resume:
    resume.save(conf, careful=True)

if __name__ == "__main__":
  sys.exit(main())
