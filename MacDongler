#!/usr/bin/env python3

import argparse
import sys
import traceback
import time
import copy
import os

import json5

from sanity import passes_sanity_checks
from autodetect import detect_settings
from devicespec import load_devices, expand_device_list
import heuristics
import status
import resume
import configfs


def operation_list_devices(conf, devices):
  if len(conf.devices) == 0:
    types = set()
    print("Device names:")
    for name,obj in devices.items():
      print(f"   {name}")
      types.add(obj['type'])

    print("Device types:")
    for t in types:
      print(f"   {t}")

  elif len(conf.devices) == 1:
    dev = devices[conf.devices[0]]
    print(json5.dumps(dev, indent=4))

  else:
    for name in conf.devices:
      print(name)
  return 0

# A device was found to work.
# Save it to the JSON results file
def save_success(conf, dev, path):
  if conf.output is None: return

  # Don't overwrite the results file if that's our device database to begin with
  if conf.device_db is not None:
    if os.path.normpath(conf.output) == os.path.normpath(conf.device_db):
      return

  result_list = []
  try:
    result_list = json5.loads(open(conf.output, "r").read())
  except:
    status.info(f"Creating output file {conf.output}")

  # Don't save multiple devices with the same name.
  existing_names = [ d["name"] for d in result_list ]

  i=1
  new_name = dev["name"]
  while new_name in existing_names:
    new_name = f"{dev['name']}_{i}"
    i += 1

  saved_dev = copy.deepcopy(dev)
  saved_dev["name"] = new_name
  if "template" in saved_dev:
    del(saved_dev["template"])

  result_list.append(saved_dev)

  open(conf.output, "w+").write(json5.dumps(result_list, indent=4))

def operation_create_device(conf, devices):
  for name in conf.devices:
    if name not in devices: continue
    dev = devices[name]

    path,msg = configfs.create_gadget(conf, dev)

    user_friendly = heuristics.user_friendly_device(conf, dev, path)

    if path is None:
      status.error(f"Creating device {name}: " + msg)
    else:
      status.info(f"Created device {name} as {user_friendly}")


def operation_test_multiple(conf, devices):
  # We're resuming a test that has actually finished.
  if conf.resume_from >= len(conf.devices):
    status.info(f"Resumed a completed test. We're done.")
    return 0

  devs_left = conf.devices[conf.resume_from:]
  status.info(f"{len(devs_left)} devices to test: {devs_left}")

  status.progress(conf.resume_from, len(conf.devices))

  # Start from where the user commanded
  for i in range(conf.resume_from, len(conf.devices)):

    name = conf.devices[i]
    if name not in devices: continue

    dev = devices[name]

    status.testing_device(conf, dev)

    path,msg = configfs.create_gadget(conf, dev)
    if path is None:
      status.error(f"Creating device {name}: " + msg)
      configfs.delete_gadget(conf, path)
      continue
    else:
      status.debug(f"Created device {name} as gadget {path}")

    # Perform heuristic checks. Is this device accepted by the host?
    success = heuristics.test_device(conf, dev, path)
    if success:
      status.found_device(conf, dev, path)
      save_success(conf, dev, path)


    status.debug(f"Cleaning up device {name} at {path}")
    configfs.delete_gadget(conf, path)

    status.progress(i+1, len(conf.devices))

    # Keep track of where we were, so we can continue later
    conf.resume_from = i+1
    if conf.resume_file:
      resume.save(conf, careful=False)

    # One-step mode: returns 10 if there are more tests, 0 otherwise.
    if conf.one_step:
      if i < len(conf.devices)-1:
        return 10
      return 0


def operation_delete_devices(conf):
  also_other_gadgets = conf.delete_all_devices

  for path in configfs.list_gadgets(conf, list_all=also_other_gadgets):
    try:
      ok,msg = configfs.delete_gadget(conf, path)
      if ok:
        status.info(f"Deleted gadget {path}")
      else:
        status.error(f"Failed to delete gadget {path}: " + msg)
    except Exception as e:
      status.error(f"Failed to delete gadget {path}: " + str(e))
      print(traceback.format_exc())

def main():
  parser = argparse.ArgumentParser()

  #
  # Operating modes
  #
  parser.add_argument("--create-device", "-c", action="store_true", default=False,
                      help="Emulate the named device(s), and do nothing else.")

  parser.add_argument("--test-multiple-devices", "-m", action="store_true", default=False,
                      help="Test the listed devices, one at a time. See also --heuristics to set how working devices are identified.")

  parser.add_argument("--delete-devices", "-x", action="store_true", default=False,
                      help="Delete emulated device(s) before continuing")

  parser.add_argument("--delete-all-devices", "-X", action="store_true", default=False,
                      help="Delete all usb_gadget device(s), even ones not created by MacDongler. MAY CAUSE ADVERSE EFFECTS.")

  parser.add_argument("--list-supported-devices", "-l", action="store_true", default=False,
                      help="List device info. If only one device is specified, shows all its properties")

  parser.add_argument("--list-heuristics", "-L", action="store_true", default=False,
                      help="List supported testing heuristics")

  parser.add_argument("--sanity", "-S", action="store_true", default=False,
                      help="Run sanity checks and then exit")

  parser.add_argument("--one-step", "-1", action="store_true", default=False,
                      help="Test one device, save state for --resume and then exit. Return code will be 0 if all jobs are complete, 10 if there are devices left to test.")

  parser.add_argument("--debug", "-g", action="store_true", default=False,
                      help="Run slower, pause between steps, log more verbosely")

  parser.add_argument("devices", nargs="*", type=str,
                      help="Devices to test. Matches device names or device types. Glob rules such as * and ? apply to names. See --list-devices for known values. Example: 'ecm.*' net")


  #
  # Configuration of paths, etc
  #
  parser.add_argument("--output", "-o", type=str, default="./macdongler.json5",
                      help="File to save successfully detected devices. This file works as input to --device-db. If the file exists, new results will be appended.")

  parser.add_argument("--resume-file", "-Q", type=str, default="./.macdongler.resume",
                      help="File to save state in, in case operation is interrupted.")

  parser.add_argument("--resume", "-r", action="store_true", default=False,
                      help="Load state from the --resume-file and start from the next untested device.")

  parser.add_argument("--clobber-resume", "-R", action="store_true", default=False,
                      help="Don't wait before clobbering resume file")

  parser.add_argument("--resume-from", "-n", type=int, default=0,
                      help="Start from the Nth device in the list of devices to test")

  parser.add_argument("--udc-controller", "-u", type=str, default=None,
                      help="UDC controller to attach devices to, one of the names available under /sys/class/udc/. Default: autoselect")

  parser.add_argument("--device-db", "-D", type=str, default=None,
                      help="Path to device database directory or file. Default: automatic")

  parser.add_argument("--language-code", type=str, default="0x409",
                      help="Numeric language code for strings. Default: 0x409 (en_US)")

  parser.add_argument("--configfs", "-C", type=str, default=None,
                      help="Path to mounted configfs. Default: autodetect")

  parser.add_argument("--status-file", "-f", type=str, default=None,
                      help="Path to structured log file where status updates are written, one JSON object per line")

  parser.add_argument("--no-color", "-P", action="store_true", default=False,
                      help="Suppress color in terminal output")


  #
  # Options related to testing and such
  #
  parser.add_argument("--heuristics", "-H", type=str, nargs="*", default=None,
                      help="List of heuristics to apply when testing multiple devices using --test-multiple-devices. Special value \"all\" applies all relevant tests. Default: \"all\" for --test-multiple-devices, none for --create-device")

  parser.add_argument("--test-duration", "-T", type=float, default=5,
                      help="Time spent testing each device, after setup but before measurements are taken.")

  parser.add_argument("--setup-duration", type=float, default=0,
                      help="Time spent waiting after creating gadget, before setting up tests. Increase if you get warnings about network or serial devices not being found.")

  parser.add_argument("--must-match-all", "-A", action="store_true", default=False,
                      help="the device test is successful only if _all_ heuristics match. Default: any single heuristic is a good enough test.")

  parser.add_argument("--serial-device", type=str, default=None,
                      help="Serial port device of USB gadgets. Default: auto-select from /dev/ttyGS*")

  #
  # Stimulation options
  #
  parser.add_argument("--net-transmit-pcap", type=str, nargs="*", default=None,
                      help="PCAP file(s) of network packets to send when emulating network adapters. Requires tcpreplay.")

  parser.add_argument("--serial-transmit-file", type=str, nargs="*", default=None,
                      help="Binary file(s) of data to transmit over each established serial link before performing tests.")



  conf = parser.parse_args()
  if conf.resume and not conf.clobber_resume:
    resume.load(conf)
    conf.resume = True    # Don't accidentally turn that setting off, damnit!

  # Set up the logger
  status.setup(conf)

  if conf.list_heuristics:
    print("Supported heuristics:")
    for name,spec in heuristics.list_heuristics(conf).items():
      print(f"{name} : {spec['description']}")
    return 0

  # Handle any settings that are set to auto-detect
  detect_settings(conf)

  ok, msg = passes_sanity_checks(conf)
  if (not ok):
    status.error("Sanity check failed: " + msg)
    return 1

  # Load our device database from disk
  devices,msg = load_devices(conf)
  if devices is None:
    status.error("Failed to load device specs: " + msg)
    return 1

  # Basic listings of capabilities
  if conf.list_supported_devices:
    return operation_list_devices(conf, devices)

  if conf.sanity:
    # Just run the sanity checks, do nothing else
    return 0

  # Handle globs, etc,
  # After this, the list of globs will be a list of device names matching the patterns.
  conf.devices = expand_device_list(conf, conf.devices)

  # Handle the magic "all" keyword
  conf.heuristics = heuristics.expand_heuristics_list(conf, conf.devices)

  # Delete isn't exclusive, we can do that before carrying out another operation
  # This is beneficial during testing, to both clean up and then load a new device
  if conf.delete_devices or conf.delete_all_devices:
    operation_delete_devices(conf)

  if conf.resume_file and not conf.resume:
    resume.save(conf, careful=not conf.clobber_resume)

  if conf.create_device:
    ret = operation_create_device(conf, devices)

    if conf.resume_file:
      resume.save(conf)

    return ret

  if conf.test_multiple_devices:
    ret = operation_test_multiple(conf, devices)

    if conf.resume_file:
      resume.save(conf)

    # Important! operation_test_multiple uses this to signal to the user that
    # there are more devices left to test, in --one-step mode.
    return ret

if __name__ == "__main__":
  sys.exit(main())
